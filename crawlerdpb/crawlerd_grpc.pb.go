// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package crawlerdpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	AddURL(ctx context.Context, in *RequestURL, opts ...grpc.CallOption) (*ResponseURL, error)
	UpdateURL(ctx context.Context, in *RequestURL, opts ...grpc.CallOption) (*ResponseURL, error)
	DeleteURL(ctx context.Context, in *RequestDeleteURL, opts ...grpc.CallOption) (*ResponseURL, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) AddURL(ctx context.Context, in *RequestURL, opts ...grpc.CallOption) (*ResponseURL, error) {
	out := new(ResponseURL)
	err := c.cc.Invoke(ctx, "/crawlerdpb.Worker/AddURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) UpdateURL(ctx context.Context, in *RequestURL, opts ...grpc.CallOption) (*ResponseURL, error) {
	out := new(ResponseURL)
	err := c.cc.Invoke(ctx, "/crawlerdpb.Worker/UpdateURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) DeleteURL(ctx context.Context, in *RequestDeleteURL, opts ...grpc.CallOption) (*ResponseURL, error) {
	out := new(ResponseURL)
	err := c.cc.Invoke(ctx, "/crawlerdpb.Worker/DeleteURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations should embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	AddURL(context.Context, *RequestURL) (*ResponseURL, error)
	UpdateURL(context.Context, *RequestURL) (*ResponseURL, error)
	DeleteURL(context.Context, *RequestDeleteURL) (*ResponseURL, error)
}

// UnimplementedWorkerServer should be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) AddURL(context.Context, *RequestURL) (*ResponseURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddURL not implemented")
}
func (UnimplementedWorkerServer) UpdateURL(context.Context, *RequestURL) (*ResponseURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateURL not implemented")
}
func (UnimplementedWorkerServer) DeleteURL(context.Context, *RequestDeleteURL) (*ResponseURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURL not implemented")
}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_AddURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).AddURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawlerdpb.Worker/AddURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).AddURL(ctx, req.(*RequestURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_UpdateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).UpdateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawlerdpb.Worker/UpdateURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).UpdateURL(ctx, req.(*RequestURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_DeleteURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).DeleteURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawlerdpb.Worker/DeleteURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).DeleteURL(ctx, req.(*RequestDeleteURL))
	}
	return interceptor(ctx, in, info, handler)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crawlerdpb.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddURL",
			Handler:    _Worker_AddURL_Handler,
		},
		{
			MethodName: "UpdateURL",
			Handler:    _Worker_UpdateURL_Handler,
		},
		{
			MethodName: "DeleteURL",
			Handler:    _Worker_DeleteURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crawlerd.proto",
}

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	AddURL(ctx context.Context, in *RequestURL, opts ...grpc.CallOption) (*ResponseURL, error)
	UpdateURL(ctx context.Context, in *RequestURL, opts ...grpc.CallOption) (*ResponseURL, error)
	DeleteURL(ctx context.Context, in *RequestDeleteURL, opts ...grpc.CallOption) (*ResponseURL, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) AddURL(ctx context.Context, in *RequestURL, opts ...grpc.CallOption) (*ResponseURL, error) {
	out := new(ResponseURL)
	err := c.cc.Invoke(ctx, "/crawlerdpb.Scheduler/AddURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) UpdateURL(ctx context.Context, in *RequestURL, opts ...grpc.CallOption) (*ResponseURL, error) {
	out := new(ResponseURL)
	err := c.cc.Invoke(ctx, "/crawlerdpb.Scheduler/UpdateURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) DeleteURL(ctx context.Context, in *RequestDeleteURL, opts ...grpc.CallOption) (*ResponseURL, error) {
	out := new(ResponseURL)
	err := c.cc.Invoke(ctx, "/crawlerdpb.Scheduler/DeleteURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations should embed UnimplementedSchedulerServer
// for forward compatibility
type SchedulerServer interface {
	AddURL(context.Context, *RequestURL) (*ResponseURL, error)
	UpdateURL(context.Context, *RequestURL) (*ResponseURL, error)
	DeleteURL(context.Context, *RequestDeleteURL) (*ResponseURL, error)
}

// UnimplementedSchedulerServer should be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (UnimplementedSchedulerServer) AddURL(context.Context, *RequestURL) (*ResponseURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddURL not implemented")
}
func (UnimplementedSchedulerServer) UpdateURL(context.Context, *RequestURL) (*ResponseURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateURL not implemented")
}
func (UnimplementedSchedulerServer) DeleteURL(context.Context, *RequestDeleteURL) (*ResponseURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURL not implemented")
}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_AddURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).AddURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawlerdpb.Scheduler/AddURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).AddURL(ctx, req.(*RequestURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_UpdateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).UpdateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawlerdpb.Scheduler/UpdateURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).UpdateURL(ctx, req.(*RequestURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_DeleteURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).DeleteURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawlerdpb.Scheduler/DeleteURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).DeleteURL(ctx, req.(*RequestDeleteURL))
	}
	return interceptor(ctx, in, info, handler)
}

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crawlerdpb.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddURL",
			Handler:    _Scheduler_AddURL_Handler,
		},
		{
			MethodName: "UpdateURL",
			Handler:    _Scheduler_UpdateURL_Handler,
		},
		{
			MethodName: "DeleteURL",
			Handler:    _Scheduler_DeleteURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crawlerd.proto",
}
